<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-12-07T15:08:02+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Hydeout</title><subtitle>The &lt;a href=&quot;http://hyde.getpoole.com&quot; target=&quot;_blank&quot;&gt;Hyde&lt;/a&gt; theme for &lt;a href=&quot;http://jekyllrb.com&quot; target=&quot;_blank&quot;&gt;Jekyll&lt;/a&gt;, refreshed.</subtitle><author><name>Andrew Fong</name></author><entry><title type="html">트러블 슈팅 도커 - 도커 용어 정리</title><link href="http://localhost:4000/docker/2020/12/07/trouble-shooting-docker-term.html" rel="alternate" type="text/html" title="트러블 슈팅 도커 - 도커 용어 정리" /><published>2020-12-07T00:00:00+09:00</published><updated>2020-12-07T00:00:00+09:00</updated><id>http://localhost:4000/docker/2020/12/07/trouble-shooting-docker-term</id><content type="html" xml:base="http://localhost:4000/docker/2020/12/07/trouble-shooting-docker-term.html">&lt;h2 id=&quot;용어-정리&quot;&gt;용어 정리&lt;/h2&gt;

&lt;h4 id=&quot;from-&quot;&gt;FROM &lt;br /&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;이미지를 가져올 (pull) 할 베이스
    &lt;ul&gt;
      &lt;li&gt;이미지에 대해 수행할 연산을 논리적으로 묶어서 레이어의 수를 최소화 하는 것이 좋다.
        &lt;ul&gt;
          &lt;li&gt;예를 들어 애플리케이션의 의존성에 관련된 패키지를 설치할 때는 각각을 별도의 디렉티브로 지정하지 않고 하나의 RUN 디렉티브로 묶어서 한꺼번에 설치하는 것이 좋다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이미지 정의
    &lt;ul&gt;
      &lt;li&gt;로컬 이미지&lt;/li&gt;
      &lt;li&gt;도커 공용 레지스트리&lt;/li&gt;
      &lt;li&gt;사설 레지스트리&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt; 지점에서 부터 빌드 작업 시작&lt;/li&gt;
  &lt;li&gt;로컬 이미지 제작에 사용할 베이스 이미지 지정&lt;/li&gt;
  &lt;li&gt;도커파일에 제일 먼저 나와야 한다.&lt;/li&gt;
  &lt;li&gt;빌드 하는데 반드시 필요한 요소&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;maintainer&quot;&gt;MAINTAINER&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;빌드할 이미지의 제작자 명시&lt;/li&gt;
  &lt;li&gt;옵션 값이므로 없어도 문제없음.&lt;/li&gt;
  &lt;li&gt;FROM 뒤 어느곳에 둬도 상관 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;env&quot;&gt;ENV&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;도커 파일에 환경변수 설정&lt;/li&gt;
  &lt;li&gt;ENV &lt;키&gt; &lt;값&gt;
&lt;/값&gt;&lt;/키&gt;    &lt;ul&gt;
      &lt;li&gt;ENV &lt;키1&gt;=&lt;값1&gt; &lt;키2&gt;=&lt;값2&gt;&lt;/값2&gt;&lt;/키2&gt;&lt;/값1&gt;&lt;/키1&gt;&lt;/li&gt;
      &lt;li&gt;ENV “키1 값1 키2 값2” -&amp;gt; 빈 공간이 있을때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot; &quot;&lt;/code&gt; 으로 감싸줘야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Andrew Fong</name></author><summary type="html">용어 정리</summary></entry><entry><title type="html">트러블 슈팅 도커 - 도커 개념</title><link href="http://localhost:4000/docker/2020/12/04/trouble-shooting-docker.html" rel="alternate" type="text/html" title="트러블 슈팅 도커 - 도커 개념" /><published>2020-12-04T00:00:00+09:00</published><updated>2020-12-04T00:00:00+09:00</updated><id>http://localhost:4000/docker/2020/12/04/trouble-shooting-docker</id><content type="html" xml:base="http://localhost:4000/docker/2020/12/04/trouble-shooting-docker.html">&lt;p&gt;내가 &lt;code class=&quot;highlighter-rouge&quot;&gt;트러블 슈팅 도커&lt;/code&gt; 라는 책을 읽고 기억에 남는 부분을 기록하기 위한 포스팅이다.&lt;/p&gt;

&lt;h3 id=&quot;도커-개념&quot;&gt;도커 개념&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;docker container (도커 컨테이너)&lt;br /&gt;
  &lt;code class=&quot;highlighter-rouge&quot;&gt;- 빌드 &amp;amp; 테스트&lt;/code&gt; &lt;br /&gt;
  &lt;code class=&quot;highlighter-rouge&quot;&gt;- 자동화&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;highlighter-rouge&quot;&gt;- 배치&lt;/code&gt; &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;가장 핵심적인 작업 &lt;code class=&quot;highlighter-rouge&quot;&gt;이미지 빌드 -&amp;gt; 애플리케이션 -&amp;gt; 컨테이너&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;docker build =&amp;gt; image (결과물)&lt;/li&gt;
  &lt;li&gt;docker images
    &lt;ul&gt;
      &lt;li&gt;설치 하는데 필요한 레이어, 배쉬 셸에서 직접 하나씩 생성&lt;/li&gt;
      &lt;li&gt;애플리케이션 담은 이미지&lt;/li&gt;
      &lt;li&gt;빌드하는 도커 파일 작성 (자동으로 생성)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;도커 핵심 개념 및 기능은 레이어드 이미지
    &lt;ul&gt;
      &lt;li&gt;이미지 계층화 &amp;amp; 이미지 콘텐츠 관리 기능 &lt;br /&gt;
  (컨테이너)를 내가 그림판으로 그렸다.. (최대한 책에 나온것처럼 비슷하게 그리려 노력함)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/40929370/101312306-c5388e80-3896-11eb-84d5-b7f87cdc6711.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;컨테이너를 이미지 레이어 방식으로 구성하면 매우 효율적이다.&lt;br /&gt;
  이미지 =&amp;gt; 담긴 내용 참조할 때 이미지를 권하는 레이어 중에서 해당레이어만으로 지정하면 됌.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;docker build
    &lt;ul&gt;
      &lt;li&gt;소스 리포지터리는 루트로 지정하지 않는다.&lt;/li&gt;
      &lt;li&gt;docker build 명령은 도커파일이 담긴 디렉터리와 그 아래 디렉터리 전체를 빌드 컨텍스트(build Context)로 사용한다&lt;/li&gt;
      &lt;li&gt;루트 (/)를 소스 리포지리로 지정하면 하드디스크에 담긴 전체 내용이 도커 데몬으로 전달 됀다.&lt;/li&gt;
      &lt;li&gt;대부분의 도커파일을 별도의 빈 디렉터리에 담아 두는것이 좋다.&lt;br /&gt;
  ##### 명령을 명시하는 순서 &amp;amp; 문법 중요하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Andrew Fong</name></author><summary type="html">내가 트러블 슈팅 도커 라는 책을 읽고 기억에 남는 부분을 기록하기 위한 포스팅이다.</summary></entry><entry><title type="html">dockerfile 생성</title><link href="http://localhost:4000/docker/2020/11/19/docker-term.html" rel="alternate" type="text/html" title="dockerfile 생성" /><published>2020-11-19T00:00:00+09:00</published><updated>2020-11-19T00:00:00+09:00</updated><id>http://localhost:4000/docker/2020/11/19/docker-term</id><content type="html" xml:base="http://localhost:4000/docker/2020/11/19/docker-term.html">&lt;p&gt;php 7.3 버전 대에 있는 컨테이너가 필요해서, 내가 필요한 패키지들을 갖고 와서 컨테이너를 만들려고 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM alpine:3.12
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;도커 파일들 중에 &lt;code class=&quot;highlighter-rouge&quot;&gt;alpine&lt;/code&gt; 이라고 적혀져 있는 것들을 자주 볼 수 있다.&lt;/p&gt;

&lt;p&gt;자주 보는데 정확히 무슨 역할을 하는 건지 잘 몰라서 찾아보았다.&lt;br /&gt;
그러고 나서 내가 필요한 패키지들을 선택해서 이미지를 만들고 난뒤에 컨테이너를 생성하고 나서 오류가 나서&lt;br /&gt;
어떻게 수정했는지 공유하기 위함 포스팅이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/40929370/99763418-285bbe80-2b3e-11eb-9778-32fea40b29b0.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오류 내용 
&lt;code class=&quot;highlighter-rouge&quot;&gt;[20-Nov-2020 05:38:24] ERROR: FPM initialization failed&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;[20-Nov-2020 05:38:24] ERROR: failed to post process the configuration&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;[20-Nov-2020 05:38:24] ALERT: [pool www] user has not been defined&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;찾아보았는데 간략해서 설명하자면 
&lt;code class=&quot;highlighter-rouge&quot;&gt;alpine&lt;/code&gt; 이란&lt;br /&gt;
&lt;b&gt;cloud 환경을 고려한 가벼운 linux 이미지 &lt;/b&gt; 라고 한다.&lt;/p&gt;

&lt;p&gt;** 참고&lt;/p&gt;

&lt;p&gt;git hub Tim de Pater&lt;br /&gt; 
https://github.com/TrafeX/docker-php-nginx&lt;/p&gt;</content><author><name>Andrew Fong</name></author><summary type="html">php 7.3 버전 대에 있는 컨테이너가 필요해서, 내가 필요한 패키지들을 갖고 와서 컨테이너를 만들려고 한다.</summary></entry><entry><title type="html">GCP CI/CD (2)</title><link href="http://localhost:4000/gcp/2020/08/31/gcp-cicd-gke.html" rel="alternate" type="text/html" title="GCP CI/CD (2)" /><published>2020-08-31T00:00:00+09:00</published><updated>2020-08-31T00:00:00+09:00</updated><id>http://localhost:4000/gcp/2020/08/31/gcp-cicd-gke</id><content type="html" xml:base="http://localhost:4000/gcp/2020/08/31/gcp-cicd-gke.html">&lt;p&gt;저번편에는 Dockerfile 만들고 빌드 하는거 까지 포스팅을 하였다.&lt;/p&gt;

&lt;p&gt;이번 포스팅에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;GKE&lt;/code&gt;를 이용하여 배포 하는 포스팅을 작성할 예정이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GKE&lt;/code&gt;란? Cloud Build를 사용하여 Kubernetes에 애플리케이션을 배포를 도와준다.&lt;/p&gt;</content><author><name>Andrew Fong</name></author><summary type="html">저번편에는 Dockerfile 만들고 빌드 하는거 까지 포스팅을 하였다.</summary></entry><entry><title type="html">GCP CI/CD (1)</title><link href="http://localhost:4000/gcp/2020/08/29/gcp-cicd.html" rel="alternate" type="text/html" title="GCP CI/CD (1)" /><published>2020-08-29T00:00:00+09:00</published><updated>2020-08-29T00:00:00+09:00</updated><id>http://localhost:4000/gcp/2020/08/29/gcp-cicd</id><content type="html" xml:base="http://localhost:4000/gcp/2020/08/29/gcp-cicd.html">&lt;p&gt;ec2-small&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;CI/CD 하고 싶은 프로젝트에 Dockerfile 을 작성해준다. &lt;br /&gt;
나는 typescript로 되어져 있는 토이프로젝트 Dockerfile 작성해 줄 것이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# step 1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## base image for step 1: Node 10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; node:10 AS builder&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# /app 을 application root 로 사용합니다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## 프로젝트의 모든 파일을 WORKDIR(/app)로 복사한다.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /app&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# copy . . 의미는 전체 프로젝트를 복사한다는 뜻이다.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . .&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 의존성 설치 및 프로젝트 빌드&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 새로운 레이어 명령어 실행 및 새로운 이미지 생성..&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 보통 패키지 설치 등 사용된다.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;npm run build

&lt;span class=&quot;c&quot;&gt;# port 3000&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;EXPOSE&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; 3000&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# default 명령어? 파라미터 설정&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# docker run 실행시 커맨드 주지 않으면 default 명령이 실행된다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# cmd 주용도는 컨테이너 실행할 때 사용할 default 설정하는것이다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# CMD node dist/src/main&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Run the app&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [ &quot;npm&quot;, &quot;start&quot; ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;빌드 단계
GCP 참고 문서
 &lt;a href=&quot;https://cloud.google.com/cloud-build/docs/build-config?hl=ko#yaml&quot; target=&quot;_blank&quot; cursor=&quot;pointer&quot;&gt;* 빌드 구성 개요&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;빌드 단계는 Cloud Build가 수행 해야하는 작업을 가르킨다.&lt;br /&gt;
빌드 단계에서 Cloud Build는 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt;의 인스턴스로 Docker 컨테이너를 실행한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;나는 docker container 로 gcp 이미지에 올릴 예정이므로 google &amp;gt; 빌드 &amp;gt; &lt;a cursor=&quot;pointer&quot; target=&quot;_blank&quot; href=&quot;https://cloud.google.com/cloud-build/docs/building/build-containers?hl=ko&quot;&gt;컨테이너 이미지 빌드&lt;/a&gt;
여기를 참고하였다.&lt;/p&gt;

&lt;p&gt;빌드를 하기 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;cloudbuild.yaml&lt;/code&gt; 파일을 작성해야한다.&lt;/p&gt;

&lt;p&gt;작성하고나면 &lt;code class=&quot;highlighter-rouge&quot;&gt;gcloud builds submit --config cloudbuild.yaml .&lt;/code&gt; 명령어를 쳐준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;내가 &lt;code class=&quot;highlighter-rouge&quot;&gt;cloudbuild.yaml&lt;/code&gt; 기준으로 작성한 것들이 cloud 페이지에 올라가진다.&lt;/p&gt;

&lt;p&gt;확인 하는 방법은 Google Cloud Console &amp;gt; Cloud Build 페이지에서 확인이가능하다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/40929370/91668059-51267600-eb44-11ea-9188-6363b961c172.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 그림 처럼 확인할 수 있다.&lt;/p&gt;

&lt;!-- - 개발자는 별도의 `.yaml` 파일로 일련의 파이프라인을 표현한다.
    - 여기에는 도커 이미지 빌드, 푸시, 테스트, 배포 등등 하고 싶은 일을 넣으면 된다.
    - 이 `.yaml` 파일은 깃허브에 소스코드와 함께 위치해야한다.
- 트리거는 GCP Cloud Build 페이지에서 트리거를 생성한다.
    - 트리거에서 어떤 브랜치에 어떤 요청이 왔을 때 어떤 `.yaml`을 실행할 지 정할 수 있다.
    - 브랜치에 따라 특정 트리거를 다르게 발동 시킬 수 있다. --&gt;</content><author><name>Andrew Fong</name></author><summary type="html">ec2-small CI/CD 하고 싶은 프로젝트에 Dockerfile 을 작성해준다. 나는 typescript로 되어져 있는 토이프로젝트 Dockerfile 작성해 줄 것이다.</summary></entry><entry><title type="html">pipeline (CI/CD)</title><link href="http://localhost:4000/concept/2020/08/29/concept-pipeline.html" rel="alternate" type="text/html" title="pipeline (CI/CD)" /><published>2020-08-29T00:00:00+09:00</published><updated>2020-08-29T00:00:00+09:00</updated><id>http://localhost:4000/concept/2020/08/29/concept-pipeline</id><content type="html" xml:base="http://localhost:4000/concept/2020/08/29/concept-pipeline.html">&lt;p&gt;여러 문서를 보다보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;파이프라인&lt;/code&gt; 이라는 단어를 많이 볼 수 있을것이다.&lt;br /&gt;
정확하게는 모르고 대충 큰뜻만 알고있다가 gcp ci/cd 포스팅을 하게되면서 의미를 정확하게 짚고 넘어가려고 &lt;br /&gt;
파이프라인에 대해 포스팅을 해보려고 한다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;일단 내가 위키백과에서 찾은 파이프라인에 대한 정보이다. &lt;br /&gt;
&lt;a cursor=&quot;pointer&quot; target=&quot;_blank&quot; href=&quot;https://ko.wikipedia.org/wiki/%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8_(%EC%BB%B4%ED%93%A8%ED%8C%85)&quot;&gt;
    https://ko.wikipedia.org/wiki/%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8_(%EC%BB%B4%ED%93%A8%ED%8C%85)
&lt;/a&gt; 
한 데이터 처리 단계의 출력이 다음 단계의 입력으로 이어지는 형태로 연결된 구조를 말합니다. (wiki)&lt;/p&gt;

&lt;p&gt;근데 내가 원하는 CI/CD의 파이프라인이 위키에 내용과 좀 다른것 같아서 여러 사이트 돌아다니면서 다시 검색을 했다.&lt;br /&gt;
그러다가 내가 궁금했던 부분을 잘 정리 해놓은 사이트가 나와서 공유하려고 한다.&lt;/p&gt;

&lt;p&gt;지금 포스팅 하는 부분은 내가 궁금한 부분만 적어놓았고,&lt;br /&gt; 밑에 참조 블로그로들어가면 &lt;code class=&quot;highlighter-rouge&quot;&gt;파이프라인 &amp;amp; CI/CD &amp;amp; CI/CD 배포 방식&lt;/code&gt; 에대해 적혀져 있으니 자세한것은 참조 블로그에서 확인하는게 좋을것 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CI/CD의 파이프라인(pipeline)은 개발자나 DevOps 전문가가 효율적이면서도 확실하게 그들의 코드를 &lt;br /&gt;
컴파일(Compile), 빌드(Build) 그리고 그들의 프로덕션 컴퓨팅 플랫폼에 배포(Deploy) 하게&lt;br /&gt;
해주는 자동화된 프로세스들의 묶음(set)이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 파이프라인 에서 가장 일반적인 컴포넌트들이 있다.
    - 빌드 자동화(buildautomation) / 지속적 통합(continuous integration)
    - 테스트 자동화(test automation)
    - 배포 자동화(deployment automation)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;참조
&lt;a href=&quot;https://linux.systemv.pe.kr/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%97%94%EC%A7%80%EB%8B%88%EC%96%B4%EB%A7%81%EC%97%90%EC%84%9C-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8pipeline%EC%9D%80-%EB%AC%B4%EC%97%87&quot;&gt;
https://linux.systemv.pe.kr/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%97%94%EC%A7%80%EB%8B%88%EC%96%B4%EB%A7%81%EC%97%90%EC%84%9C-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8pipeline%EC%9D%80-%EB%AC%B4%EC%97%87/
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Andrew Fong</name></author><summary type="html">여러 문서를 보다보면 파이프라인 이라는 단어를 많이 볼 수 있을것이다. 정확하게는 모르고 대충 큰뜻만 알고있다가 gcp ci/cd 포스팅을 하게되면서 의미를 정확하게 짚고 넘어가려고 파이프라인에 대해 포스팅을 해보려고 한다.</summary></entry><entry><title type="html">프로그래머스 - 여행계획(javascript)</title><link href="http://localhost:4000/algorithm/2020/08/12/algorithm-programmers-trip.html" rel="alternate" type="text/html" title="프로그래머스 - 여행계획(javascript)" /><published>2020-08-12T00:00:00+09:00</published><updated>2020-08-12T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/2020/08/12/algorithm-programmers-trip-</id><content type="html" xml:base="http://localhost:4000/algorithm/2020/08/12/algorithm-programmers-trip.html">&lt;p&gt;PHP 개발을 주로 하고 있고 전 회사에서 잠깐 typescript로 개발 경험이 있어서 알고리즘을 풀 때 
자바스크립트로 선택해서 풀고있습니다.&lt;/p&gt;

&lt;p&gt;여기에 올리는 이유는 알고리즘을 잘 못 풀어서 통과를 못했기때문에 누군가가 테스트 케이스를 댓글로 알려줬으면 해서 올립니다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;제공하는 실행 테스트로는 다 pass 되는데 어디부분에서 문제가 있는지 잘 모르겠습니다. &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tickets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;tickets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tickets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;tickets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tickets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tickets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ICN&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
        
    &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// 목적지 문자열 기준으로 정렬해주기&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;tickets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;temp2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;destIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;tickets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;destIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;nx&quot;&gt;tickets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tickets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;bfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tickets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Andrew Fong</name></author><summary type="html">PHP 개발을 주로 하고 있고 전 회사에서 잠깐 typescript로 개발 경험이 있어서 알고리즘을 풀 때 자바스크립트로 선택해서 풀고있습니다.</summary></entry><entry><title type="html">그래프 (DFS&amp;amp;BFS)</title><link href="http://localhost:4000/algorithm/2020/08/05/algorithm-graph.html" rel="alternate" type="text/html" title="그래프 (DFS&amp;BFS)" /><published>2020-08-05T00:00:00+09:00</published><updated>2020-08-05T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/2020/08/05/algorithm-graph</id><content type="html" xml:base="http://localhost:4000/algorithm/2020/08/05/algorithm-graph.html">&lt;p&gt;너비 우선 탐색 (Breadth-First Search)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;탐색 알고리즘
 -&amp;gt; 그래프에서 탐색한다는뜻
     = 특정 노드를 탐색하겠다는 뜻&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;노드 탐색
        &lt;ul&gt;
          &lt;li&gt;너비 우선 탐색&lt;/li&gt;
          &lt;li&gt;깊이 우선 탐색&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;너비 우선 탐색 (BFS) 
	- 정점들과 같은 레벨에 있는 노드들 먼저 탐색하는 방식
깊이 우선 탐색 (DFS)
	- 정점의 자식들을 먼저 탐색하는 방식&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;사이클이 없는 방식에서 탐색하는 방식이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/40929370/89375657-112cc880-d729-11ea-9774-994ae004f002.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;빨간 화살표는 탐색을 하기 위해서 노드 이동하는 부분을 그림으로 그려놓음&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;BFS 방식 : A - B - C - D - G - H- I - E - F - J&lt;/li&gt;
  &lt;li&gt;DFS 방식: A - B  - D - E  - F - C - G -H - I - J&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;** BFS 알고리즘 코드로 작성&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;자료 구조 큐를 활용함&lt;br /&gt;
 need_visit &amp;amp; visited 큐&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;깊이 우선 탐색 (Depth-First Search)&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;자기와 연결된 노드의 밑에 맨 밑에까지 탐색하고&lt;br /&gt;
그게 리프 노드이면, 그 상위의 노드로 가서 다른 리프노드를 먼저 끝까지 탐색 하는것&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DFS 알고리즘 구현&lt;br /&gt;
  need_visit 스택, visited 큐 활용한다&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;시간복잡도&lt;br /&gt;
	* 일반적인 DFS 시간 복잡도&lt;br /&gt;
		노드 수 : V &lt;br /&gt;
		간선 수 : E &lt;br /&gt;
		- 위 코드에서 while need_visit V+E 번만큼 수행함&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 시간 복잡도: O(V+E)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Andrew Fong</name></author><summary type="html">너비 우선 탐색 (Breadth-First Search)</summary></entry><entry><title type="html">정렬</title><link href="http://localhost:4000/algorithm/2020/08/04/algorithm-alignment.html" rel="alternate" type="text/html" title="정렬" /><published>2020-08-04T00:00:00+09:00</published><updated>2020-08-04T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/2020/08/04/algorithm-alignment</id><content type="html" xml:base="http://localhost:4000/algorithm/2020/08/04/algorithm-alignment.html">&lt;p&gt;바이너리 탐색 &amp;gt; 이진트리를 보고 유무 탐색&lt;/p&gt;

&lt;p&gt;** 탐색 ( 순차 &amp;amp; 해쉬 &amp;amp; 이진)&lt;br /&gt;
** 이진탐색에 따라 공부함,&lt;/p&gt;

&lt;p&gt;&lt;b&gt; - 이진탐색 (Binary Search)&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Q. 다음 1~30 병뚜껑에는 각각 1 ~ 100 사이의 번호가 표시되어 있다.&lt;br /&gt;
이중에 70이 있을지 없을지 확인하는 방법을 찾아보세요.&lt;/p&gt;

&lt;p&gt;조건 : &lt;br /&gt;
1) 가장 적게 병을 따야 한다.&lt;br /&gt;
2) 각 병뚜껑에 씌여진 번호는 낮은 번호 순으로 기입되어 있다.&lt;/p&gt;

&lt;p&gt;** 정렬이 되어있다는 전제 조건,,&lt;/p&gt;

&lt;p&gt;순차 -&amp;gt; 하나씩 앞에서 부터 따는 ..&lt;/p&gt;

&lt;p&gt;하지만 정렬이 되어있다는 전제 조건이라면 가운데의 병을 찾아서 값 비교 한다.&lt;/p&gt;

&lt;p&gt;15의 병을 땄을 때는 60 이라고 생각하면 16 ~ 30 에 70이 있을 확률이 높음&lt;/p&gt;

&lt;p&gt;22 의 병을 뚜껑을 땄을때는 75이다. 그럼 왼쪽의 병을 기준으로 찾는다.&lt;br /&gt;
라고 하면서 조금씩 줄여가본다 —&amp;gt; 이러한 방식은 이진탐색 방법&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;** 그러므로 이진탐색이 순차탐색보다 빠르다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이진 탐색코드&lt;/p&gt;

&lt;p&gt;분할 정복 알고리즘과 이진 탐색&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 분할 정복 알고리즘 (Divide and Conquer) —&amp;gt; 재귀용법 에서 많이 쓰인다,
	- Divide : 문제를 하나 또는 둘 이상으로 나눈다.
	- Conquer: 나눠진 문제가 충분히 작고, 해결이  가능하다면 해결하고, 그렇지 않다면 다시 나눈다.
- 이진 탐색 
	- Divide: 리스트를 두 개의 서브 리스트로 나눈다.
	- Conquer 
		- 검색할 숫자 (search) &amp;gt; 중간값 이면, 뒷 부분의 서브 리스트에서 검색할 숫자를 찾는다.
		- 검색할 숫자 (search) &amp;lt; 중간값 이면, 앞 부분의 서브 리스트에서 검색할 숫자를 찾는다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;b&gt;- 순차 탐색 (Sequential Search)&lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;순차 탐색 (Sequential Search)
    &lt;ul&gt;
      &lt;li&gt;탐색은 여러 데이터 중에서  원하는 데이터를 찾아내는 것을의미&lt;/li&gt;
      &lt;li&gt;데이터가 담겨있는 리스트를 앞에서부터 하나씩 비교해서  원하는 데이터를 찾는 방법&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;최악의 경우리스트  길이가 n일때, n번비교해야함
    &lt;ul&gt;
      &lt;li&gt;O(n)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Andrew Fong</name></author><summary type="html">바이너리 탐색 &amp;gt; 이진트리를 보고 유무 탐색</summary></entry><entry><title type="html">GCP 웹서버 구축</title><link href="http://localhost:4000/gcp/2020/07/20/gcp-webserver.html" rel="alternate" type="text/html" title="GCP 웹서버 구축" /><published>2020-07-20T00:00:00+09:00</published><updated>2020-07-20T00:00:00+09:00</updated><id>http://localhost:4000/gcp/2020/07/20/gcp-webserver</id><content type="html" xml:base="http://localhost:4000/gcp/2020/07/20/gcp-webserver.html">&lt;p&gt;내가 올려놓은 소스들을 실제로 웹서버 에서 테스트 해보기 위해서 gcp 에서 웹 서버를 만드는 방법을 찾아보았다.
프로젝트 생성을 했다는 전제조건으로 포스팅을 해보려고 한다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;406&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/40929370/87937174-31c11580-cacf-11ea-8204-4802fcd87c9f.png&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;vm 인스턴스를 만들어 줘야한다. Compute Engine &amp;gt; VM 인스턴스&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/40929370/88022201-d2fcaa00-cb69-11ea-8662-d862a615d3ac.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;인스턴스가 만들어지면 외부 IP 주소를 할당 받게되며, 이는  임시 IP 이지만 고정 IP로 할당받을 수있다.&lt;br /&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;외부 IP 주소로 할당 방법&lt;br /&gt;
목록 &amp;gt; VPC 네트워크 &amp;gt; 외부 IP 주소 설정 하고, 유형을 고정으로 변경해준다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;그리고 나서, vm 인스턴스 목록에서 ssh 클라우드로 접속해준다.&lt;/p&gt;

&lt;p&gt;인스턴스가 생성이 잘되었다면, ssh 접속이 가능하다.
&lt;img src=&quot;https://user-images.githubusercontent.com/40929370/88068844-b2554400-cbab-11ea-83e6-3b9eeed71c37.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;서버 연결&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2-1. 기본 설정하기&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# linux root 사용자로 변경 (ssh 연결 완료되면 제일 먼저 root로 변경해준다.)&amp;lt;/span&amp;gt;
sudo su 

# 패키지 목록 갱신
apt-get update

# 현재 운영체제에 설치되어 있는 프로그램 최신버전 패치
apt-get upgrade

# 시스템 시간 설정
dpkg-reconfigure tzdata

# nginx 설치
apt-get install nginx-y

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;nginx 설치 후&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;방화벽 설정해 줘야한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/40929370/90978381-7e918380-e588-11ea-8514-f203de24de2e.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;고정 외부 IP 만들고 vm 인스턴스에 매칭한다. 
( VPC 네트워크 &amp;gt; 외부 IP 주소 &amp;gt; 고정주소 예약 )&lt;/p&gt;

    &lt;p&gt;4-1 원격에서 SSH로 서버 접속하는 방법
    - ssh-keygen 으로 공개키를 만든다.&lt;br /&gt;
    &lt;code class=&quot;highlighter-rouge&quot;&gt;console
      ssh-keygen -t rsa -C 'test@test.com'
   &lt;/code&gt;
    &lt;img src=&quot;https://user-images.githubusercontent.com/40929370/90978708-c0bbc480-e58a-11ea-9728-91d69c589b1e.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- GCP 메뉴 &amp;gt; Compute Engine &amp;gt; 메타 데이터에 공개키를 등록해야한다.
    Compute Engine &amp;gt; 메타 데이터 &amp;gt; SSH 공개키 등록 ( 메타 데이터 클릭 후, 수정 버튼 눌러서 추가할 수 있다. )
   
- ssh로 접속하기
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;httpd(아파치) 설치 하기&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;설치 하기 전에 저장소의 패키지 목록업데이트 및 업그레이드를 해준다
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt upgrade
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;apache2 설치
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;apache2
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;설치된 Apache 버전 확인
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;apache2 &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;Apache 구동
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service apache2 restart  // 재시작
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service apache2 stop     // 멈춤
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service apache2 start    // 시작
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;http://35.216.37.188/   &lt;br /&gt; 
gcp 이용해서 서버 구동완료하였다.&lt;/p&gt;</content><author><name>Andrew Fong</name></author><summary type="html">내가 올려놓은 소스들을 실제로 웹서버 에서 테스트 해보기 위해서 gcp 에서 웹 서버를 만드는 방법을 찾아보았다. 프로젝트 생성을 했다는 전제조건으로 포스팅을 해보려고 한다.</summary></entry></feed>